## CSE 331 hw-poly Questions
## Part 0
###########################################################################
0. Addition Pseudocode = add(p, q), assuming p is a polynomial or a term and q is a polynomial or a term.
r = p + q:
    set r = q by making a term-by-term copy of all terms in q to r
    {Inv: r = q + p_0 + p_1 + ... + p_i-1, where p_j is the jth term in p}
    foreach term, t_p, in p:
        if any term, t_r, in r has the same degree as t_p,
        then replace t_r in r with the sum of t_p and tr
        else insert t_p into r as a new term

Subtraction Pseudocode = sub(p, q), assuming p is a polynomial or a term and q is a polynomial or a term.
add(p, q.negate()) // using q.negate() from RatNum.java

1. Multiplication Pseudocode = multiply(p,q), assuming p is a polynomial or a term and q is a polynomial or a term.

r = p * q:
    set r to be empty
    {Inv: r = q_0 * (p_0 + p_1 + ... + p_i-1) + q_1 * (p_0 + p_1 + ... + p_i-1) + ... + q_j-1 * (p_0 + p_1 + ... + p_i-1),
    where p_i is the ith term in p and q_j is the jth term in q}
    foreach term, t_q, in q:
        foreach term, t_p, in p:
            add(r, t_q * t_p) *** MUST FIX!!!


2. Division Pseudocode
// Outdated/old version of my pseudocode. *** NOTE: THIS IS NOT MY ANSWER FOR DIVISION. THE FINAL VERSION OF DIVISION IS BELOW ***
{pre: for polynomials p and q passed in, all terms must be unique in degree(cannot have 2+ terms sharing degrees)}
r = p % q:
    set r to be empty
    set c_p to be empty
    set c_q to be empty
    // Making a list of all coefficients in p; includes filling in empty exponents from p.highest_degree to 0 with placeholder 0x^i
    for(int i = p.highest_degree; i > 0; i--)
        if p.hasExponent of i
            add current coefficient (num) to c_p
        else
            add new num to c_p with 0 coefficient.

    // Making a list of all coefficients in q; includes filling in empty exponents from q.highest_degree to 0 with placeholder 0x^i
    for(int i = q.highest_degree; i > 0; i--)
            if p.hasExponent of i
                add current coefficient (num) to c_q
            else
                add new num to c_q with 0 coefficient.

    //long division
    {inv: 0 <= i < k <= c_p.size() -1 ^ c_q lies in between c_p[i] and c_p[k]}
        int i = 0;
        while(i + c_q.size() <= c_p.size()) // i + c_q.size() = k
            add c_p[i] / c_q[i] to r // Building our answer.
            for(int j = 0; j < c_q.size(); j++) // j keeps track inside c_q; i + j keeps track inside c_p
                multiply c_q[j] by (c_p[i] / c_q[i]) // comparing divisor to numerator and preparing divisor
                int difference = sub(c_p[j], c_q[j]) // Doing the subtraction and storing in c_p
                c_p[i + j] = difference

            foreach num in c_p
                if find first non-zero
                    set i = num

************* THIS IS MY ACTUAL DIVISION PSEUDOCODE **********************
// Updated version of my pseudocode. *** NOTE: THIS IS MY ANSWER FOR DIVISION ***
{pre: for polynomials u and v passed in, all terms must be unique in degree(cannot have 2+ terms sharing degrees)}
q = u % v ^ u = q * v + r:
    set result to be empty
    set r to be a copy of u

    //long division
    {inv: r.degree() && q.degree >= 0 ^ r.degree() < v.degree() ^ q.degree <= u.degree() ^ q.degree() >= 0}
            while(r.degree() >= v.degree())
                add (r.highest_degree_term / v.highest_degree_term) to result // Building our result
                scaled_v = copy of v
                foreach term in scaled_v
                    multiply each term by (r.highest_degree_term / v.highest_degree_term) // comparing divisor to numerator and preparing divisor
                r = sub(r, scaled_v) // I defined polynomial subtraction above.



3. Division Example: (x3+x-1) / (x+1) = x2-x+2

u = (x^3 + x - 1)
v = (x + 1)
r = copy of u = (x^3 + x - 1)
while(r.degree() >= v.degree())
    Iteration 1: x^3 >= x^1 YES
    add (r.highest_degree_term / v.highest_degree_term) to result : result = [(x^3 / x = x^2)]
    scaled_v = copy of v : scaled_v = {x + 1}
    foreach term in scaled_v : v = {x + 1}
        multiply each term by (r.highest_degree_term / v.highest_degree_term) : scaled_v = {(x*(x^3/x^1)=x^3), (1*x^2 = x^2)}
    r = sub(r, scaled_v) // I defined polynomial subtraction above : r = {x^3 + x - 1} - {x^3, x^2} => -x^2 + x - 1
    Iteration 2: -x^2 >= x^1 YES
        add (r.highest_degree_term / v.highest_degree_term) to result : result = [x^2, (-x^2 / x = -x)]
        scaled_v = copy of v : scaled_v = {x + 1}
        foreach term in scaled_v : v = {x + 1}
            multiply each term by (r.highest_degree_term / v.highest_degree_term) : scaled_v = {(x*(-x^2/x^1)=-x^2), (1*-x^1 = -x^1)}
        r = sub(r, scaled_v) // I defined polynomial subtraction above : r = {-x^2 + x - 1} - {-x^2 -x} => 2x - 1
        Iteration 3: x^1 >= x^1 YES
                add (r.highest_degree_term / v.highest_degree_term) to result : result = [x^2, -x, (2x / x = 2)]
                scaled_v = copy of v : scaled_v = {x + 1}
                foreach term in scaled_v : v = {x + 1}
                    multiply each term by (r.highest_degree_term / v.highest_degree_term) : scaled_v = {(x*(2x/x)=2x), (1*2 = 2)}
                r = sub(r, scaled_v) // I defined polynomial subtraction above : r = {2x - 1} - {2x + 2} => -1
We are done!!! result = x^2 - x + 2





## Part 1
###########################################################################

1. Weakened Rep Invariant

    a. You would first have to change the RatNum(int n, int d) constructor and remove the part where it finds the gcf and
    divides n and d by it. This is advantageous since the constructor is now more succinct, efficient, and easier to
    implement since less code and complication is required.

    b. We would also have to change our checkRep() function since it doesn't need to uphold the assumptions that RatNum
    is simplified. This easier to implement since it means less code is more efficent since we are running one less
    method.

    c. We would need to change the hashCode() method to include simplifying both the numer and demon using the gcf()
    method. If this isn't done, then the hashcode will not match for fractions that are the same number but with
    different numerators and denominators. This change is disadvantageous, since it adds more complexity and code to
    implement inside this one function.

    d. The equals method would also have to be changed since the same number can now have different numerators and
    denominators. This ends up breaking the equals() since it assumes each number has a unique numer and denom.
    Dividing the numer and denom by gcf(numer, denom) before the method checks if they're equal would
    solve this issue. This change would be disadvantageous though, since it adds more complexity and code to
    implement inside this one function.

    e. The toString() method must be changed to divide the numer and denom by gcf(numer, denom) since the spec
    requires the returned string be in reduced terms. Making this change would be disadvantageous since it adds
    more complexity and implementation.


2. Alternate add, sub, mul, div

    a. For starters, it would violate the specification that a RatNum must be immutable, since our numer and denom fields
    get changed every time one of these operation methods gets run.

    b. We would also need to add an @spec.effects tag before each method since we are now modifying
    this' concrete fields.

    c. The div() method would also need to add to its @spec.requires that arg must not be negative, since that could
     break our rep invariant for this by making the dominator negative.

3. Constructor checkReps

    It is sufficient to call checkRep() only at the end of the constructors because the object RatNum
    and its fields are immutable, final, and none of RatNum's methods actually modify numer and denom (which is important since
    the rep invariant depends on numer and denom). Changes to instances of RatNum are prevented through a combination of
    using copying, final (immutability), and private.


## Part 2
###########################################################################

1. Calls to checkRep in RatTerm

    -I included calls to checkRep() at the beginning and end of all public methods/operations inside RatTerm except for
  the constuctor, within which I only used checkRep() at the end (since the instance isn't initalized at the beginning).

2. Weakened Rep Invariant

    a. To start, we would need to first change the RatTerm constructor to not change expt to 0 if coefficient = 0. This
    is advantageous in the constructor since we can simply reduce code and complexity by remvoing the if statement
    and boolean check.

    b. We also need to change toString() to check if the coefficient itself is zero and not just the exponent before
    returning "0". This is disadvantageous to us, the implementer, since we have to add another if else statement to
    now cover this extra case in where the coefficient is 0 and the expt is n (for int n < 0 < n).

    c. The equals() method also needs to be altered so that if both coefficients == 0, then the two RatTerms are considered
    equal regardless of their exponents. This is disadvantageous since we now need to add more boolean checks since
    we now know less about the state of both RatTerms (this and the argument passed) coming into the method.

    d. The checkRep() method would also have to be changed since there are less rep invariants to uphold. For the
    method itself, this is advantageous since checkRep() would then include less code and less tasks to complete.

3. Alternate Rep Invariant

    a. The constructor would have to be modified to include making this.expt = 0 in the case that this.coeff is NaN.
    Making this addition to the method would be disadvantageous since we are having to add more code, complexity,
    are overall reducing efficiency (even just by a tiny bit).

    b. The checkRep() function would also have to be modified to include checking in the case that this.coeff is NaN,
    this.expt is == 0. This is disadvantageous since our checkRep() method now has more time and code complexity.

    Other than those two, nothing else really needs to be changed since I already decided in all of my methods
    that any NaN RatTerm returned should have a coeff of NaN and an expt of 0 and thus implemented all of my meth
    ods
    with this already in mind.

4. Preferred Invariants

    - I personally prefer to only have the second invariant (coeff.equals(RatNum.ZERO) => expt=0) due to the fact that
    the second invariant allows us to worry less about edge cases, meaning some of our method implementations
    can be less complicated and thorough. The second invariant just allows us to get closer to the abstract idea of
    algebra with less effort/complication. The first invariant on the other hand doesn't really do much since it never
    really matters in our operations what the exponent for a NaN RatTerm is.


## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



2. Alternate Representation



