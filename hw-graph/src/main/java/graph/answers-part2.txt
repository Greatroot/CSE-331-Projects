## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Section 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of edges, whether there is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

    A: Relatively easy to implement, since you can easily access each edge in the Graph through a high abstraction.
    Is at a disadvantage when it comes to searching nodes, since they will be hidden under a layer of abstraction.

    B: Relatively fast at creating a graph and adding nodes and edges. This representation is
    disadvantaged when it comes to removing vertices and edges though, since it needs to find all
    vertices or edges.

    C: Relatively fast at adding and removing edges, but very slow when it comes to adding and removing
    nodes, since the matrix must be resized/copied every time.

2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

    - I originally decided on making an adjacency list where both node and edge were private inner classes
    and node objects themselves stored edges, but this proved to be too coupled of a design.

    - So to fix run-time complexity issues, I changed my rep to be an adjacency list where only edge had its
    own object and both nodes and edges were stored as a key/value pair inside a Graph. So I chose an adjacency
    list as my rep so that adding nodes and edges can be O(1) time-complexity and chose to use a Map to
    link both node and edge so that there is enough coupling to keep their relationship without having so
    much that I loose performance

## Section 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

    - Got rid of testing suite for setNode() and getNode() since I removed those methods/functionality.

    - Added testing all of my methods to see if they properly throw IllegalArgumentException
        for passing in nulls.

    - Added testing all methods with an empty graph to see if they return the expected output and behave
        the correct way.

    - Added testing for proper behavior when adding duplicate nodes and edges.

    - Added testing for proper behavior with ListNode and ListChildren

    - Added testing to see if my graph works properly with empty strings

    - Added testing to ensure graph worked with a large graph and a circular graph.

2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.

    - Yes, I made slight changes to my specs by tweaking
        a.) methods to allow empty strings as node values and edge labels.
        b.) methods to throw an IllegalArgumentExceptions if any nulls get passed.
