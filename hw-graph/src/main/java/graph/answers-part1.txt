## CSE 331 hw-graph Part 1 Questions

## Section 1
###########################################################################

1. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function:
        The front of the queue (i.e. the least-recently-added item) = entries[0]
        The back of the queue (i.e. the most-recently-added item) = entries[size-1]

    Representation Invariant:
        Entries never contains null value
        Items can only be removed from the front (defined in AF) of entries as entries[0]
        Items can only be added to the back (defined in AF) of entries as entries[size-1]


    ### IntQueue2

    Abstraction Function:
        The front of the queue (i.e. the least-recently-added item) = entries[front]
        The back of the queue (i.e. the most-recently-added item) = entries[front + size-1]


    Representation Invariant:
        Entries never contains null value between entries[front] and entries[front + size-1]
        Items can only be removed from the front (defined in AF) of entries as entries[front]
        Items can only be added to the back (defined in AF) of entries as entries[front + size-1]


2. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.

    - The front is the first element and size is smaller than all elements present: a and d
    - Ring buffer format: b, c, f, g, and h.
    - ASK!!!


3. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    a. `public int solveEquations(int x, int y, int z)`

        - This method should not expose the representation, since no detail about the equation itself is given and only
        the result of the calcuation is given. Assuming that the representation consists of this equation used, having
        the client only be able to see the inputs and outputs should not expose the equation itself.

    b. `public String[] decode(boolean slowly)`

        - Assuming that whatever is being decoded is part of the representation, I would assume that whatever string
        array is returned is exposing the representation, even though it isn't being shown in its original form.

    c. `private Date myBirthday()`

        - Assuming myBirthday is a rep field, this method cannot expose the representation even though it
        returns a rep field. This is because the method is private and thus can't be accessed outside the class.

    d. `public String toString()`

        - I think it would depend on what you decide to print out in your toString() method. But assuming that
        this toString is to be used similar to Object's toString, then this method will probably return a string
        representation of rep fields and expose the representation.

    e. `public Iterator<Integer> elements()`

        - Assuming that this method returns an iterator of a field representation's underlying elements,
        this field definitely exposes the representation. This is due to the fact that iterators "allow the
        caller to remove elements from the underlying collection."

    f. `public Deck(List<Card> cards)`

        - It would depend. If the list of cards or any of its objects in memory are used by any of the Deck's field
        reps, then yes, this method could expose the rep. But if the constructor makes a new copy of all of
        the cards within the list before storing it, then there should be no rep exposure.



## Section 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

    - To start with the biggest decision I made, I split the Graph ADT Graph, Node, and Edge each into their
    own classes so that I could store multiple pieces of data into both a Node and Edge object. I wanted
    each Node instance to keep track of its parents and children along with its String value. As for Edge,
    I wanted each instance to keep track of its String label and its two endpoint Nodes. Both classes are
    public so that I could make subclasses of them in the future and I made all of their methods private
   (except for some of Node's getters, which retain immutability since they return immutable objects) to
   ensure immutability. I plan on making the Node class and Edge class implement final fields to also
   ensure immutability.

   I included the capability for my graph to construct itself with no Nodes, with one Node via a String
   parameter or Node parameter (to give client options; shouldn't be hard to implement), check if a specific
   Node has a parent/child relationship to another Node, add a Node (two different ways to give options),
   add an Edge, get an individual Node or Edge, set a pre-existing Node to a different value, and get
   all Nodes or Edges in the graph. I feel this functionality is sufficient for my Graph ADT simply because
   all of the operations I listed above combine to meet the outline of what a Abstract Graph with nodes and
   edges is. The graph only needs to add and retrieve Nodes and Edges within the graph, and nothing more.


## Section 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?

    - My testing strategy basically consisted of compiling this long list on Google Docs (my actual hero)
     of all the separate tests I could think of for each and every method in Graph.java. I then went through
     and implemented all of the tests I could with script tests, which ended up being more broad and general,
     and implemented the rest of those tests using JUnit. The JUnit tests allowed me to test specific
     inputs and outputs a lot more precisely and effectively.