/**
     * A <b>Node</b> represents a simple <b>immutable</b> data point on our Graph, and is made up of
     * a single String value and connections (list of Nodes) to their parent and children nodes.
     *
     * <p> Each node can be connected one directionally via an edge. For example, node "A"
     * can be connected to node "B" by edge "E" and "B" is directly reachable from "A" (A, B). Because of one-way
     * directionality, "A" cannot be accessed by "B" using edge "E." A new edge must be made for this to happen.
     *
     *<p> This "one directionality" of how nodes are connected by edges is mainly kept track of by the
     * Edge class and it instances itself, but nodes do keep track of these relationships as well
     *
     * <p> For the purposes of simplicity, it is valid for a Node to have an empty String as a value.
     * An empty String also counts as a unique value for the purposes of comparing Nodes.
     *
     */
    private class Node {

        /**
         * @param value the value the Node is constructed with.
         * @spec.requires {@code value != null}
         * @spec.effects Constructs a new Node instance with the value "value."
         */
        public Node(String value)
        {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node constructor is not yet implemented");
        }

        /**
         * Adds a parent node to this node's list of parents.
         *
         * @param newParent the parent node to be added.
         * @spec.requires {@code newParent != null}
         * @return true if and only if the new parent node is successfully added &and;&and; didn't previously
         * exist before.
         */
        private boolean addParent(Node newParent)
        {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.addParent() is not yet implemented");
        }

        // THIS IS BEING SAVED FOR POTENTIAL FUTURE DEVELOPMENT
//        /**
//         * Removes a parent node from this node's list of parents.
//         *
//         * @param parent the parent node to be removed.
//         * @spec.requires {@code parent != null}
//         * @return true if and only if parent was already present &and;&and; was successfully removed.
//         */
//        private boolean removeParent(Node parent)
//        {
//            // TODO: Fill in this method, then remove the RuntimeException
//            throw new RuntimeException("Node.removeParent() is not yet implemented");
//        }

        /**
         * Adds a child node to this node's list of children.
         *
         * @param newChild the child node to be added.
         * @spec.requires {@code newChild != null}
         * @return true if and only if the new child node is successfully added &and;&and; didn't previously
         * exist before.
         */
        private boolean addChild(Node newChild)
        {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.addChild() is not yet implemented");
        }

        // THIS IS BEING SAVED FOR POTENTIAL FUTURE DEVELOPMENT
//        /**
//         * Removes a child node from this node's list of children.
//         *
//         * @param child the parent node to be removed.
//         * @spec.requires {@code child != null}
//         * @return true if and only if parent was already present &and;&and; was successfully removed.
//         */
//        private boolean removeChild(Node child)
//        {
//            // TODO: Fill in this method, then remove the RuntimeException
//            throw new RuntimeException("Node.removeChild() is not yet implemented");
//        }

        /**
         * Returns a copy of this Node's value.
         *
         * @return a completely separate copy in memory of this Node's value.
         */
        public String getValue()
        {
            // Make sure to return a completely separate copy to keep this class immutable.
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.getValue() is not yet implemented");
        }

        /**
         * Returns all parents of this.
         *
         * @return the list of Nodes parent to this. If there are no parents, returns empty list.
         */
        public List<Node> getParents()
        {
            //Should not break the immutability of Node since the underlying elements of List<Node>
            // are immutable themselves.
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.getParents() is not yet implemented");
        }

        /**
         * returns all children of this.
         *
         * @return a list of nodes child to this. If there are no children, returns empty list.
         */
        public List<Node> getChildren()
        {
            //Should not break the immutability of Node since the underlying elements of List<Node>
            // are immutable themselves
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.getChildren() is not yet implemented");
        }

        /**
         * Returns a string representation of this Node.
         *
         * @return a String representation of this Node by printing out the value and the parent and children
         * lists.
         */
        @Override
        public String toString() {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.toString() is not yet implemented");
        }

        /**
         * Standard equality operation.
         *
         * @param obj the object to be compared for equality
         * @return true if and only if 'obj' is an instance of a Node and 'this' and 'obj' represent
         * the same Node with the same value.
         */
        @Override
        public boolean equals(Object obj) {
            // In this current version of Graph, Node.equals() should only be used to prevent duplicates.
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.equals() is not yet implemented");
        }

        /**
         * Standard hashCode function.
         *
         * @return an int that all objects equal to this will also return
         */
        @Override
        public int hashCode() {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Node.hashCode() is not yet implemented");
        }
    }

    /**
     * A <b>Edge</b> represents an <b>immutable</b> one-directional edge connecting two Nodes on our graph,
     * and is made up of a single String label and the edge's starting (parent) Node and ending (child) Node.
     *
     * <p> Each edge is one directional, meaning it represents a vector pointing FROM one Node TO another
     * Node. For example, node "A" can be connected to node "B" by edge "E" and "B" is directly
     * reachable from "A" (A, B). Because of one-way directionality, "A" cannot be accessed
     * by "B" using edge "E." A new edge must be made for this to happen.
     *
     *<p> This "one directionality" of how nodes are connected by edges is mainly kept track of by the
     * Edge class and it instances itself, but nodes do keep track of these relationships as well.
     *
     * For the purposes of simplicity, it is valid for an Edge to have an empty String as a label.
     * An empty String also counts as a unique value for the purposes of comparing two Edges with the
     * same parent and child nodes.
     *
     * @spec.specfield endpoint : Node // Either Node that makes up an edge. If Edge A has the parent Node B
     * and the child Node C, then both Nodes B and C are endpoints of A.
     */
    private class Edge {

        /**
         * Constructs an Edge with the specified "label," "parent," and "child."
         *
         * @param label the label for this Edge
         * @param parent the parent Node that this Edge starts at.
         * @param child the child Node that this Edge ends at.
         * @spec.requires {@code label != null && parent != null && child != null}
         *
         * Note: an edge can start at a node and point to itself.
         */
        public Edge(String label, Node parent, Node child)
        {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge constructor is not yet implemented");
        }

        /**
         * Returns this Edge's label
         *
         * @return a separate copy of this Edge's label.
         */
        private String getLabel()
        {
            // Returns a copy to maintain immutability.
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge.getLabel() is not yet implemented");
        }

        /**
         * Returns the parent Node.
         *
         * @return a separate copy of this Edge's parent Node.
         */
        private Node getParent()
        {
            // Returns a copy to maintain immutability.
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge.getParent() is not yet implemented");
        }

        /**
         * Returns the child Node.
         *
         * @return a separate copy of this Edge's child Node.
         */
        private Node getChild()
        {
            // Returns a copy to maintain immutability.
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge.getChild() is not yet implemented");
        }

        /**
         * Returns a string representation of this Edge.
         *
         * @return a String representation of this Node by printing out the label and the parent and children
         * Nodes.
         */
        @Override
        public String toString() {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge.toString() is not yet implemented");
        }

        /**
         * Standard equality operation.
         *
         * @param obj the object to be compared for equality
         * @return true if and only if 'obj' is an instance of an Edge and 'this' and 'obj' represent
         * the same Edges with the same label and endpoints.
         */
        @Override
        public boolean equals(Object obj) {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge.toString() is not yet implemented");
        }

        /**
         * Standard hashCode function.
         *
         * @return an int that all objects equal to this will also return
         */
        @Override
        public int hashCode() {
            // TODO: Fill in this method, then remove the RuntimeException
            throw new RuntimeException("Edge.toString() is not yet implemented");
        }
    }